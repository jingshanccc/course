// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gitee.com/jingshanccc/course/file/proto/file/file.proto

package file

import (
	fmt "fmt"
	dto "gitee.com/jingshanccc/course/file/proto/dto"
	basic "gitee.com/jingshanccc/course/public/proto/basic"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileService service

func NewFileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileService service

type FileService interface {
	Upload(ctx context.Context, in *dto.FileDto, opts ...client.CallOption) (*dto.FileDto, error)
	Check(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.FileDto, error)
	VerifyUpload(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.VerifyRes, error)
	UploadShard(ctx context.Context, in *dto.FileShardDto, opts ...client.CallOption) (*basic.Boolean, error)
	Merge(ctx context.Context, in *dto.FileDto, opts ...client.CallOption) (*dto.FileDto, error)
	Cancel(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) Upload(ctx context.Context, in *dto.FileDto, opts ...client.CallOption) (*dto.FileDto, error) {
	req := c.c.NewRequest(c.name, "FileService.Upload", in)
	out := new(dto.FileDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Check(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.FileDto, error) {
	req := c.c.NewRequest(c.name, "FileService.Check", in)
	out := new(dto.FileDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) VerifyUpload(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.VerifyRes, error) {
	req := c.c.NewRequest(c.name, "FileService.VerifyUpload", in)
	out := new(dto.VerifyRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UploadShard(ctx context.Context, in *dto.FileShardDto, opts ...client.CallOption) (*basic.Boolean, error) {
	req := c.c.NewRequest(c.name, "FileService.UploadShard", in)
	out := new(basic.Boolean)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Merge(ctx context.Context, in *dto.FileDto, opts ...client.CallOption) (*dto.FileDto, error) {
	req := c.c.NewRequest(c.name, "FileService.Merge", in)
	out := new(dto.FileDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Cancel(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error) {
	req := c.c.NewRequest(c.name, "FileService.Cancel", in)
	out := new(basic.String)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	Upload(context.Context, *dto.FileDto, *dto.FileDto) error
	Check(context.Context, *basic.String, *dto.FileDto) error
	VerifyUpload(context.Context, *basic.String, *dto.VerifyRes) error
	UploadShard(context.Context, *dto.FileShardDto, *basic.Boolean) error
	Merge(context.Context, *dto.FileDto, *dto.FileDto) error
	Cancel(context.Context, *basic.String, *basic.String) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		Upload(ctx context.Context, in *dto.FileDto, out *dto.FileDto) error
		Check(ctx context.Context, in *basic.String, out *dto.FileDto) error
		VerifyUpload(ctx context.Context, in *basic.String, out *dto.VerifyRes) error
		UploadShard(ctx context.Context, in *dto.FileShardDto, out *basic.Boolean) error
		Merge(ctx context.Context, in *dto.FileDto, out *dto.FileDto) error
		Cancel(ctx context.Context, in *basic.String, out *basic.String) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) Upload(ctx context.Context, in *dto.FileDto, out *dto.FileDto) error {
	return h.FileServiceHandler.Upload(ctx, in, out)
}

func (h *fileServiceHandler) Check(ctx context.Context, in *basic.String, out *dto.FileDto) error {
	return h.FileServiceHandler.Check(ctx, in, out)
}

func (h *fileServiceHandler) VerifyUpload(ctx context.Context, in *basic.String, out *dto.VerifyRes) error {
	return h.FileServiceHandler.VerifyUpload(ctx, in, out)
}

func (h *fileServiceHandler) UploadShard(ctx context.Context, in *dto.FileShardDto, out *basic.Boolean) error {
	return h.FileServiceHandler.UploadShard(ctx, in, out)
}

func (h *fileServiceHandler) Merge(ctx context.Context, in *dto.FileDto, out *dto.FileDto) error {
	return h.FileServiceHandler.Merge(ctx, in, out)
}

func (h *fileServiceHandler) Cancel(ctx context.Context, in *basic.String, out *basic.String) error {
	return h.FileServiceHandler.Cancel(ctx, in, out)
}
